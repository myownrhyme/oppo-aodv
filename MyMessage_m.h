//
// Generated file, do not edit! Created by nedtool 5.0 from MyMessage.msg.
//

#ifndef __MYMESSAGE_M_H
#define __MYMESSAGE_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "common.h"
// }}

/**
 * Enum generated from <tt>MyMessage.msg:10</tt> by nedtool.
 * <pre>
 * enum basicHead
 * {
 * 
 *     RREQ = 1;
 *     RREP = 2;
 *     DATA = 3;
 *     UPDATE = 4;
 *     dataACK = 5;
 *     updateACK = 6;
 * }
 * </pre>
 */
enum basicHead {
    RREQ = 1,
    RREP = 2,
    DATA = 3,
    UPDATE = 4,
    dataACK = 5,
    updateACK = 6
};

/**
 * Class generated from <tt>MyMessage.msg:20</tt> by nedtool.
 * <pre>
 * packet MyPacket
 * {
 *     unsigned int packetType;
 * }
 * </pre>
 */
class MyPacket : public ::omnetpp::cPacket
{
  protected:
    unsigned int packetType;

  private:
    void copy(const MyPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MyPacket&);

  public:
    MyPacket(const char *name=nullptr, int kind=0);
    MyPacket(const MyPacket& other);
    virtual ~MyPacket();
    MyPacket& operator=(const MyPacket& other);
    virtual MyPacket *dup() const {return new MyPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getPacketType() const;
    virtual void setPacketType(unsigned int packetType);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MyPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MyPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>MyMessage.msg:27</tt> by nedtool.
 * <pre>
 * //
 * // Represents an AODV Route Request
 * //
 * class AODVRREQ extends MyPacket
 * {
 *     unsigned int packetType = RREQ;
 *     unsigned int hopCount;
 *     unsigned int seq;
 *     unsigned int destNode;
 * }
 * </pre>
 */
class AODVRREQ : public ::MyPacket
{
  protected:
    unsigned int packetType;
    unsigned int hopCount;
    unsigned int seq;
    unsigned int destNode;

  private:
    void copy(const AODVRREQ& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AODVRREQ&);

  public:
    AODVRREQ(const char *name=nullptr);
    AODVRREQ(const AODVRREQ& other);
    virtual ~AODVRREQ();
    AODVRREQ& operator=(const AODVRREQ& other);
    virtual AODVRREQ *dup() const {return new AODVRREQ(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getPacketType() const;
    virtual void setPacketType(unsigned int packetType);
    virtual unsigned int getHopCount() const;
    virtual void setHopCount(unsigned int hopCount);
    virtual unsigned int getSeq() const;
    virtual void setSeq(unsigned int seq);
    virtual unsigned int getDestNode() const;
    virtual void setDestNode(unsigned int destNode);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AODVRREQ& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AODVRREQ& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>MyMessage.msg:38</tt> by nedtool.
 * <pre>
 * //
 * // Represents an AODV Route Reply
 * //
 * class AODVRREP extends MyPacket
 * {
 *     unsigned int packetType = RREP;
 *     unsigned int hopCount;
 *     unsigned int seq;
 *     RestorePath downHelper;
 *     unsigned int downGuide;
 *     RestorePath upHelper;
 *     unsigned int upGuide;
 * }
 * 
 * 
 * // Represents an data packets
 * //
 * </pre>
 */
class AODVRREP : public ::MyPacket
{
  protected:
    unsigned int packetType;
    unsigned int hopCount;
    unsigned int seq;
    RestorePath downHelper;
    unsigned int downGuide;
    RestorePath upHelper;
    unsigned int upGuide;

  private:
    void copy(const AODVRREP& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AODVRREP&);

  public:
    AODVRREP(const char *name=nullptr);
    AODVRREP(const AODVRREP& other);
    virtual ~AODVRREP();
    AODVRREP& operator=(const AODVRREP& other);
    virtual AODVRREP *dup() const {return new AODVRREP(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getPacketType() const;
    virtual void setPacketType(unsigned int packetType);
    virtual unsigned int getHopCount() const;
    virtual void setHopCount(unsigned int hopCount);
    virtual unsigned int getSeq() const;
    virtual void setSeq(unsigned int seq);
    virtual RestorePath& getDownHelper();
    virtual const RestorePath& getDownHelper() const {return const_cast<AODVRREP*>(this)->getDownHelper();}
    virtual void setDownHelper(const RestorePath& downHelper);
    virtual unsigned int getDownGuide() const;
    virtual void setDownGuide(unsigned int downGuide);
    virtual RestorePath& getUpHelper();
    virtual const RestorePath& getUpHelper() const {return const_cast<AODVRREP*>(this)->getUpHelper();}
    virtual void setUpHelper(const RestorePath& upHelper);
    virtual unsigned int getUpGuide() const;
    virtual void setUpGuide(unsigned int upGuide);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AODVRREP& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AODVRREP& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>MyMessage.msg:53</tt> by nedtool.
 * <pre>
 * class AODVDATA extends MyPacket
 * {
 *     unsigned int packetType = RREQ;
 *     unsigned int hopCount;
 *     unsigned int destNode;
 *     RestorePath table_prior;
 * }
 * </pre>
 */
class AODVDATA : public ::MyPacket
{
  protected:
    unsigned int packetType;
    unsigned int hopCount;
    unsigned int destNode;
    RestorePath table_prior;

  private:
    void copy(const AODVDATA& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AODVDATA&);

  public:
    AODVDATA(const char *name=nullptr);
    AODVDATA(const AODVDATA& other);
    virtual ~AODVDATA();
    AODVDATA& operator=(const AODVDATA& other);
    virtual AODVDATA *dup() const {return new AODVDATA(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getPacketType() const;
    virtual void setPacketType(unsigned int packetType);
    virtual unsigned int getHopCount() const;
    virtual void setHopCount(unsigned int hopCount);
    virtual unsigned int getDestNode() const;
    virtual void setDestNode(unsigned int destNode);
    virtual RestorePath& getTable_prior();
    virtual const RestorePath& getTable_prior() const {return const_cast<AODVDATA*>(this)->getTable_prior();}
    virtual void setTable_prior(const RestorePath& table_prior);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AODVDATA& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AODVDATA& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>MyMessage.msg:61</tt> by nedtool.
 * <pre>
 * class AODVDATAACK extends MyPacket
 * {
 *     unsigned int AckType = dataACK;
 * }
 * </pre>
 */
class AODVDATAACK : public ::MyPacket
{
  protected:
    unsigned int AckType;

  private:
    void copy(const AODVDATAACK& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AODVDATAACK&);

  public:
    AODVDATAACK(const char *name=nullptr);
    AODVDATAACK(const AODVDATAACK& other);
    virtual ~AODVDATAACK();
    AODVDATAACK& operator=(const AODVDATAACK& other);
    virtual AODVDATAACK *dup() const {return new AODVDATAACK(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getAckType() const;
    virtual void setAckType(unsigned int AckType);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AODVDATAACK& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AODVDATAACK& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>MyMessage.msg:65</tt> by nedtool.
 * <pre>
 * class UPDATEDATA extends MyPacket
 * {
 *     unsigned int packetType = UPDATE;
 *     unsigned int hopCount;
 *     unsigned int seq;
 *     unsigned int destNode;
 * }
 * </pre>
 */
class UPDATEDATA : public ::MyPacket
{
  protected:
    unsigned int packetType;
    unsigned int hopCount;
    unsigned int seq;
    unsigned int destNode;

  private:
    void copy(const UPDATEDATA& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const UPDATEDATA&);

  public:
    UPDATEDATA(const char *name=nullptr);
    UPDATEDATA(const UPDATEDATA& other);
    virtual ~UPDATEDATA();
    UPDATEDATA& operator=(const UPDATEDATA& other);
    virtual UPDATEDATA *dup() const {return new UPDATEDATA(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getPacketType() const;
    virtual void setPacketType(unsigned int packetType);
    virtual unsigned int getHopCount() const;
    virtual void setHopCount(unsigned int hopCount);
    virtual unsigned int getSeq() const;
    virtual void setSeq(unsigned int seq);
    virtual unsigned int getDestNode() const;
    virtual void setDestNode(unsigned int destNode);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const UPDATEDATA& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, UPDATEDATA& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>MyMessage.msg:72</tt> by nedtool.
 * <pre>
 * class UPDATEACK extends MyPacket
 * {
 *     unsigned int AckType = updateACK;
 *     NeighborSet neighborset;
 * }
 * </pre>
 */
class UPDATEACK : public ::MyPacket
{
  protected:
    unsigned int AckType;
    NeighborSet neighborset;

  private:
    void copy(const UPDATEACK& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const UPDATEACK&);

  public:
    UPDATEACK(const char *name=nullptr);
    UPDATEACK(const UPDATEACK& other);
    virtual ~UPDATEACK();
    UPDATEACK& operator=(const UPDATEACK& other);
    virtual UPDATEACK *dup() const {return new UPDATEACK(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getAckType() const;
    virtual void setAckType(unsigned int AckType);
    virtual NeighborSet& getNeighborset();
    virtual const NeighborSet& getNeighborset() const {return const_cast<UPDATEACK*>(this)->getNeighborset();}
    virtual void setNeighborset(const NeighborSet& neighborset);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const UPDATEACK& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, UPDATEACK& obj) {obj.parsimUnpack(b);}


#endif // ifndef __MYMESSAGE_M_H

